import asyncio
import websockets
import pyttsx3
import json
import aiohttp
import threading
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def play_text(text):
    engine = pyttsx3.init()
    TH_voice_id = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices\\Tokens\\TTS_THAI"
    engine.setProperty('voice', TH_voice_id)
    engine.setProperty('rate', 120)
    engine.setProperty('volume', 1)
    engine.say(text)
    engine.runAndWait()

# WebSocket Wakeword
async def WebSocket_wakeword(websocket, path):  # ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö WebSocket
    try:
        message = await websocket.recv()
        data = json.loads(message)
        command = data.get("command", "")

        if command == "hello_avis":
            response_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
        elif command == "thank_you_avis":
            response_text = "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Avis ‡∏Ñ‡∏£‡∏±‡∏ö"
        else:
            response_text = "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à"

        asyncio.create_task(asyncio.to_thread(play_text, response_text))
        await websocket.send(json.dumps({"response": response_text}))
    except Exception as e:
        print(f"‚ö†Ô∏è Error in Wakeword WebSocket: {e}")

# ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏õ API Gowajee ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
async def send_audio_to_gowajee(audio_data):
    url = "https://api.gowajee.ai/v1/speech-to-text/pulse/transcribe"
    headers = {
        "x-api-key": "gwj_live_68e8664be460418ab4eee60e7eb60ca0_hbooe"
    }
    files = {
        'audioData': ('audio.webm', audio_data, 'audio/webm')
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, data=files) as response:
            if response.status == 200:
                response_json = await response.json()
                return response_json.get("transcript", "")
            else:
                return f"Error: {response.status} - {await response.text()}"

# WebSocket Speech-to-Text (Port 8001)
async def handle_connection_WebSocket_speech_to_text(websocket, path):
    try:
        async for message in websocket:
            if isinstance(message, bytes):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                print("üé§ Received audio data")
                text = await send_audio_to_gowajee(message)
                print(f"üìù Transcribed text: {text}")
                await websocket.send(json.dumps({"text": text}))
            else:
                print(f"‚ö†Ô∏è Received non-audio data: {message}")
    except websockets.exceptions.ConnectionClosed:
        print("‚ùå Speech-to-Text WebSocket closed.")
    except Exception as e:
        print(f"‚ö†Ô∏è Error in Speech-to-Text WebSocket: {e}")

async def send_text_to_llm(text):
    url = "http://localhost:5000/ask_llm"
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json={"text": text}) as resp:
            result = await resp.json()
            return result.get("response", "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à")

async def process_speech():
    async with websockets.connect("ws://localhost:8001") as websocket:
        print("üé§ Connected to Speech-to-Text WebSocket")
        await websocket.send(json.dumps({"action": "start_recording"}))
        response = await websocket.recv()
        text = json.loads(response).get("text", "")
        if text:
            llm_response = await send_text_to_llm(text)
            print(f"ü§ñ LLM Response: {llm_response}")
            await asyncio.to_thread(play_text, llm_response)

async def conversation_loop():
    while True:
        print("üéôÔ∏è Listening for Wakeword...")
        try:
            async with websockets.connect("ws://localhost:8000") as websocket:
                message = await websocket.recv()
                print(f"üëÇ Detected Wakeword: {message}")
                await process_speech()  # ‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ LLM ‚Üí ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        except Exception as e:
            print(f"‚ö†Ô∏è Error connecting to Wakeword WebSocket: {e}")
            await asyncio.sleep(1)  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà

async def start_websocket_servers():
    wakeword_server = websockets.serve(WebSocket_wakeword, "localhost", 8000)
    speech_to_text_server = websockets.serve(handle_connection_WebSocket_speech_to_text, "localhost", 8001)
    await asyncio.gather(wakeword_server, speech_to_text_server)
    print("üöÄ WebSocket servers are running on ws://localhost:8000 and ws://localhost:8001")

@app.route("/playvoice", methods=["POST"])
def playvoice():
    data = request.get_json()
    text = data.get("text", "")
    if text:
        threading.Thread(target=play_text, args=(text,)).start()
        return jsonify({"status": "success", "message": "Text is being spoken.", "text": text}), 200
    else:
        return jsonify({"status": "error", "message": "No text provided."}), 400

def run_flask():
    app.run(host="0.0.0.0", port=4000)

if __name__ == '__main__':
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    asyncio.run(start_websocket_servers())  # ‡πÄ‡∏£‡∏¥‡πà‡∏° WebSocket
